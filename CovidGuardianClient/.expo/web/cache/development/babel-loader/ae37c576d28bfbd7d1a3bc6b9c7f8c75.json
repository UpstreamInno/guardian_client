{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/satya/Workspace/Callstack/react-navigation-tabs/src/navigators/createMaterialTopTabNavigator.tsx\";\nimport * as React from 'react';\nimport { TabView } from 'react-native-tab-view';\nimport createTabNavigator from \"../utils/createTabNavigator\";\nimport MaterialTopTabBar from \"../views/MaterialTopTabBar\";\n\nvar MaterialTabView = function (_React$PureComponent) {\n  _inherits(MaterialTabView, _React$PureComponent);\n\n  function MaterialTabView() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MaterialTabView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MaterialTabView)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this._renderLazyPlaceholder = function (props) {\n      var LazyPlaceholder = _this.props.lazyPlaceholderComponent;\n\n      if (LazyPlaceholder != null) {\n        return React.createElement(LazyPlaceholder, _extends({}, props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          }\n        }));\n      }\n\n      return null;\n    };\n\n    _this._renderTabBar = function (props) {\n      var state = _this.props.navigation.state;\n      var route = state.routes[state.index];\n      var descriptors = _this.props.descriptors;\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n      var tabBarVisible = options.tabBarVisible == null ? true : options.tabBarVisible;\n      var _this$props = _this.props,\n          navigation = _this$props.navigation,\n          getLabelText = _this$props.getLabelText,\n          getAccessibilityLabel = _this$props.getAccessibilityLabel,\n          getTestID = _this$props.getTestID,\n          renderIcon = _this$props.renderIcon,\n          onTabPress = _this$props.onTabPress,\n          onTabLongPress = _this$props.onTabLongPress,\n          _this$props$tabBarCom = _this$props.tabBarComponent,\n          TabBarComponent = _this$props$tabBarCom === void 0 ? MaterialTopTabBar : _this$props$tabBarCom,\n          tabBarPosition = _this$props.tabBarPosition,\n          tabBarOptions = _this$props.tabBarOptions,\n          screenProps = _this$props.screenProps;\n\n      if (TabBarComponent === null || !tabBarVisible) {\n        return null;\n      }\n\n      return React.createElement(TabBarComponent, _extends({}, tabBarOptions, props, {\n        tabBarPosition: tabBarPosition,\n        screenProps: screenProps,\n        navigation: navigation,\n        getLabelText: getLabelText,\n        getAccessibilityLabel: getAccessibilityLabel,\n        getTestID: getTestID,\n        renderIcon: renderIcon,\n        onTabPress: onTabPress,\n        onTabLongPress: onTabLongPress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        }\n      }));\n    };\n\n    return _this;\n  }\n\n  _createClass(MaterialTabView, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          getLabelText = _this$props2.getLabelText,\n          getAccessibilityLabel = _this$props2.getAccessibilityLabel,\n          getTestID = _this$props2.getTestID,\n          renderIcon = _this$props2.renderIcon,\n          onTabPress = _this$props2.onTabPress,\n          onTabLongPress = _this$props2.onTabLongPress,\n          screenProps = _this$props2.screenProps,\n          lazyPlaceholderComponent = _this$props2.lazyPlaceholderComponent,\n          tabBarComponent = _this$props2.tabBarComponent,\n          tabBarOptions = _this$props2.tabBarOptions,\n          navigation = _this$props2.navigation,\n          descriptors = _this$props2.descriptors,\n          rest = _objectWithoutProperties(_this$props2, [\"getLabelText\", \"getAccessibilityLabel\", \"getTestID\", \"renderIcon\", \"onTabPress\", \"onTabLongPress\", \"screenProps\", \"lazyPlaceholderComponent\", \"tabBarComponent\", \"tabBarOptions\", \"navigation\", \"descriptors\"]);\n\n      var state = navigation.state;\n      var route = state.routes[state.index];\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n      var swipeEnabled = options.swipeEnabled == null ? this.props.swipeEnabled : options.swipeEnabled;\n\n      if (typeof swipeEnabled === 'function') {\n        swipeEnabled = swipeEnabled(state);\n      }\n\n      return React.createElement(TabView, _extends({}, rest, {\n        navigationState: navigation.state,\n        swipeEnabled: swipeEnabled,\n        renderTabBar: this._renderTabBar,\n        renderLazyPlaceholder: this._renderLazyPlaceholder,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        }\n      }));\n    }\n  }]);\n\n  return MaterialTabView;\n}(React.PureComponent);\n\nexport default createTabNavigator(MaterialTabView);","map":{"version":3,"sources":["createMaterialTopTabNavigator.tsx"],"names":["MaterialTabView","React","PureComponent","_renderLazyPlaceholder","LazyPlaceholder","_renderTabBar","state","route","descriptors","descriptor","options","tabBarVisible","navigation","getLabelText","getAccessibilityLabel","getTestID","renderIcon","onTabPress","onTabLongPress","TabBarComponent","tabBarPosition","tabBarOptions","screenProps","lazyPlaceholderComponent","tabBarComponent","rest","swipeEnabled","createTabNavigator"],"mappings":";;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,SAAA,OAAA,QAAA,uBAAA;AACA,OAAA,kBAAA;AAGA,OAAA,iBAAA;;AAqCMA,IAAAA,e;;;;;;;;;;;;;;;;UACJG,sB,GAAyB,UAAA,KAAA,EAA6B;AAAA,UAClBC,eADkB,GACE,KAAA,CADF,KACE,CADF,wBAAA;;AAGpD,UAAIA,eAAe,IAAnB,IAAA,EAA6B;AAC3B,eAAO,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAAA,UAAA,QAAA,EAAA;AAAA,YAAA,QAAA,EAAA,YAAA;AAAA,YAAA,UAAA,EAAP;AAAO;AAAA,SAAA,CAAA,CAAP;AAGF;;AAAA,aAAA,IAAA;;;UAGFC,a,GAAgB,UAAA,KAAA,EAA+B;AAAA,UACrCC,KADqC,GAC3B,KAAA,CAAA,KAAA,CAD2B,UAC3B,CAD2B,KAAA;AAE7C,UAAMC,KAAK,GAAGD,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAAhC,KAAcA,CAAd;AAF6C,UAGrCE,WAHqC,GAGrB,KAAA,CAHqB,KAGrB,CAHqB,WAAA;AAI7C,UAAMC,UAAU,GAAGD,WAAW,CAACD,KAAK,CAApC,GAA8B,CAA9B;AACA,UAAMG,OAAO,GAAGD,UAAU,CAA1B,OAAA;AAEA,UAAME,aAAa,GACjBD,OAAO,CAAPA,aAAAA,IAAAA,IAAAA,GAAAA,IAAAA,GAAuCA,OAAO,CADhD,aAAA;AAP6C,UAAA,WAAA,GAsBzC,KAAA,CAtByC,KAAA;AAAA,UAW3CE,UAX2C,GAAA,WAAA,CAAA,UAAA;AAAA,UAY3CC,YAZ2C,GAAA,WAAA,CAAA,YAAA;AAAA,UAa3CC,qBAb2C,GAAA,WAAA,CAAA,qBAAA;AAAA,UAc3CC,SAd2C,GAAA,WAAA,CAAA,SAAA;AAAA,UAe3CC,UAf2C,GAAA,WAAA,CAAA,UAAA;AAAA,UAgB3CC,UAhB2C,GAAA,WAAA,CAAA,UAAA;AAAA,UAiB3CC,cAjB2C,GAAA,WAAA,CAAA,cAAA;AAAA,UAAA,qBAAA,GAAA,WAAA,CAAA,eAAA;AAAA,UAkB1BC,eAlB0B,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,iBAAA,GAAA,qBAAA;AAAA,UAmB3CC,cAnB2C,GAAA,WAAA,CAAA,cAAA;AAAA,UAoB3CC,aApB2C,GAAA,WAAA,CAAA,aAAA;AAAA,UAqB3CC,WArB2C,GAAA,WAAA,CAAA,WAAA;;AAwB7C,UAAIH,eAAe,KAAfA,IAAAA,IAA4B,CAAhC,aAAA,EAAgD;AAC9C,eAAA,IAAA;AAGF;;AAAA,aACE,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA,QAAA,CAAA,EAAA,EAAA,aAAA,EAAA,KAAA,EAAA;AAGE,QAAA,cAAc,EAHhB,cAAA;AAIE,QAAA,WAAW,EAJb,WAAA;AAKE,QAAA,UAAU,EALZ,UAAA;AAME,QAAA,YAAY,EANd,YAAA;AAOE,QAAA,qBAAqB,EAPvB,qBAAA;AAQE,QAAA,SAAS,EARX,SAAA;AASE,QAAA,UAAU,EATZ,UAAA;AAUE,QAAA,UAAU,EAVZ,UAAA;AAWE,QAAA,cAAc,EAXhB,cAAA;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EADF;AACE;AAAA,OAAA,CAAA,CADF;;;;;;;;6BAiBO;AAAA,UAAA,YAAA,GAiBH,KAjBG,KAAA;AAAA,UAGLN,YAHK,GAAA,YAAA,CAAA,YAAA;AAAA,UAILC,qBAJK,GAAA,YAAA,CAAA,qBAAA;AAAA,UAKLC,SALK,GAAA,YAAA,CAAA,SAAA;AAAA,UAMLC,UANK,GAAA,YAAA,CAAA,UAAA;AAAA,UAOLC,UAPK,GAAA,YAAA,CAAA,UAAA;AAAA,UAQLC,cARK,GAAA,YAAA,CAAA,cAAA;AAAA,UASLI,WATK,GAAA,YAAA,CAAA,WAAA;AAAA,UAULC,wBAVK,GAAA,YAAA,CAAA,wBAAA;AAAA,UAWLC,eAXK,GAAA,YAAA,CAAA,eAAA;AAAA,UAYLH,aAZK,GAAA,YAAA,CAAA,aAAA;AAAA,UAcLT,UAdK,GAAA,YAAA,CAAA,UAAA;AAAA,UAeLJ,WAfK,GAAA,YAAA,CAAA,WAAA;AAAA,UAgBFiB,IAhBE,GAAA,wBAAA,CAAA,YAAA,EAAA,CAAA,cAAA,EAAA,uBAAA,EAAA,WAAA,EAAA,YAAA,EAAA,YAAA,EAAA,gBAAA,EAAA,aAAA,EAAA,0BAAA,EAAA,iBAAA,EAAA,eAAA,EAAA,YAAA,EAAA,aAAA,CAAA,CAAA;;AAAA,UAmBCnB,KAnBD,GAmBWM,UAnBX,CAAA,KAAA;AAoBP,UAAML,KAAK,GAAGD,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAAhC,KAAcA,CAAd;AAEA,UAAMG,UAAU,GAAGD,WAAW,CAACD,KAAK,CAApC,GAA8B,CAA9B;AACA,UAAMG,OAAO,GAAGD,UAAU,CAA1B,OAAA;AAEA,UAAIiB,YAAY,GAEdhB,OAAO,CAAPA,YAAAA,IAAAA,IAAAA,GACI,KAAA,KAAA,CADJA,YAAAA,GAEKA,OAAD,CAJN,YAAA;;AAMA,UAAI,OAAA,YAAA,KAAJ,UAAA,EAAwC;AACtCgB,QAAAA,YAAY,GAAGA,YAAY,CAA3BA,KAA2B,CAA3BA;AAGF;;AAAA,aACE,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,QAAA,eAAe,EAAEd,UAAU,CAF7B,KAAA;AAGE,QAAA,YAAY,EAHd,YAAA;AAIE,QAAA,YAAY,EAAE,KAJhB,aAAA;AAKE,QAAA,qBAAqB,EAAE,KALzB,sBAAA;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EADF;AACE;AAAA,OAAA,CAAA,CADF;;;;;EA3F0BX,KAAK,CAACC,a,CAA9BF;;AAuGN,eAAe2B,kBAAkB,CAAjC,eAAiC,CAAjC","sourcesContent":["import * as React from 'react';\nimport { StyleProp, ViewStyle } from 'react-native';\nimport { TabView, SceneRendererProps } from 'react-native-tab-view';\nimport createTabNavigator, {\n  NavigationViewProps,\n} from '../utils/createTabNavigator';\nimport MaterialTopTabBar from '../views/MaterialTopTabBar';\nimport {\n  NavigationTabProp,\n  NavigationMaterialTabOptions,\n  MaterialTabBarOptions,\n  SceneDescriptorMap,\n} from '../types';\n\ntype Route = {\n  key: string;\n  routeName: string;\n};\n\ntype Config = {\n  keyboardDismissMode?: 'none' | 'on-drag';\n  swipeEnabled?: boolean;\n  swipeDistanceThreshold?: number;\n  swipeVelocityThreshold?: number;\n  initialLayout?: { width?: number; height?: number };\n  lazy?: boolean;\n  lazyPlaceholderComponent?: React.ComponentType<{ route: Route }>;\n  tabBarComponent?: React.ComponentType<any>;\n  tabBarOptions?: MaterialTabBarOptions;\n  tabBarPosition?: 'top' | 'bottom';\n  sceneContainerStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n};\n\ntype Props = NavigationViewProps &\n  Config & {\n    onSwipeStart?: () => void;\n    onSwipeEnd?: () => void;\n    navigation: NavigationTabProp;\n    descriptors: SceneDescriptorMap;\n    screenProps?: unknown;\n  };\n\nclass MaterialTabView extends React.PureComponent<Props> {\n  _renderLazyPlaceholder = (props: { route: Route }) => {\n    const { lazyPlaceholderComponent: LazyPlaceholder } = this.props;\n\n    if (LazyPlaceholder != null) {\n      return <LazyPlaceholder {...props} />;\n    }\n\n    return null;\n  };\n\n  _renderTabBar = (props: SceneRendererProps) => {\n    const { state } = this.props.navigation;\n    const route = state.routes[state.index];\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    const tabBarVisible =\n      options.tabBarVisible == null ? true : options.tabBarVisible;\n\n    const {\n      navigation,\n      getLabelText,\n      getAccessibilityLabel,\n      getTestID,\n      renderIcon,\n      onTabPress,\n      onTabLongPress,\n      tabBarComponent: TabBarComponent = MaterialTopTabBar,\n      tabBarPosition,\n      tabBarOptions,\n      screenProps,\n    } = this.props;\n\n    if (TabBarComponent === null || !tabBarVisible) {\n      return null;\n    }\n\n    return (\n      <TabBarComponent\n        {...tabBarOptions}\n        {...props}\n        tabBarPosition={tabBarPosition}\n        screenProps={screenProps}\n        navigation={navigation}\n        getLabelText={getLabelText}\n        getAccessibilityLabel={getAccessibilityLabel}\n        getTestID={getTestID}\n        renderIcon={renderIcon}\n        onTabPress={onTabPress}\n        onTabLongPress={onTabLongPress}\n      />\n    );\n  };\n\n  render() {\n    const {\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      getLabelText,\n      getAccessibilityLabel,\n      getTestID,\n      renderIcon,\n      onTabPress,\n      onTabLongPress,\n      screenProps,\n      lazyPlaceholderComponent,\n      tabBarComponent,\n      tabBarOptions,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      navigation,\n      descriptors,\n      ...rest\n    } = this.props;\n\n    const { state } = navigation;\n    const route = state.routes[state.index];\n\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    let swipeEnabled =\n      // @ts-ignore\n      options.swipeEnabled == null\n        ? this.props.swipeEnabled\n        : (options as any).swipeEnabled;\n\n    if (typeof swipeEnabled === 'function') {\n      swipeEnabled = swipeEnabled(state);\n    }\n\n    return (\n      <TabView\n        {...rest}\n        navigationState={navigation.state}\n        swipeEnabled={swipeEnabled}\n        renderTabBar={this._renderTabBar}\n        renderLazyPlaceholder={this._renderLazyPlaceholder}\n      />\n    );\n  }\n}\n\nexport default createTabNavigator<Config, NavigationMaterialTabOptions, Props>(\n  MaterialTabView\n);\n"]},"metadata":{},"sourceType":"module"}