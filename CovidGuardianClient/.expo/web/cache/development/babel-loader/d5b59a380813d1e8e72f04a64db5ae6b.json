{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/satya/Workspace/Callstack/react-navigation-tabs/src/views/MaterialTopTabBar.tsx\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { TabBar } from 'react-native-tab-view';\nimport Animated from 'react-native-reanimated';\n\nvar TabBarTop = function (_React$PureComponent) {\n  _inherits(TabBarTop, _React$PureComponent);\n\n  function TabBarTop() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TabBarTop);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TabBarTop)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this._renderLabel = function (_ref) {\n      var route = _ref.route,\n          focused = _ref.focused,\n          color = _ref.color;\n      var _this$props = _this.props,\n          showLabel = _this$props.showLabel,\n          upperCaseLabel = _this$props.upperCaseLabel,\n          labelStyle = _this$props.labelStyle,\n          allowFontScaling = _this$props.allowFontScaling;\n\n      if (showLabel === false) {\n        return null;\n      }\n\n      var label = _this.props.getLabelText({\n        route: route\n      });\n\n      if (typeof label === 'string') {\n        return React.createElement(Animated.Text, {\n          style: [styles.label, {\n            color: color\n          }, labelStyle],\n          allowFontScaling: allowFontScaling,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          }\n        }, upperCaseLabel ? label.toUpperCase() : label);\n      }\n\n      if (typeof label === 'function') {\n        return label({\n          focused: focused,\n          tintColor: color\n        });\n      }\n\n      return label;\n    };\n\n    _this._renderIcon = function (_ref2) {\n      var route = _ref2.route,\n          focused = _ref2.focused,\n          color = _ref2.color;\n      var _this$props2 = _this.props,\n          renderIcon = _this$props2.renderIcon,\n          showIcon = _this$props2.showIcon,\n          iconStyle = _this$props2.iconStyle;\n\n      if (showIcon === false) {\n        return null;\n      }\n\n      return React.createElement(View, {\n        style: [styles.icon, iconStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        }\n      }, renderIcon({\n        route: route,\n        focused: focused,\n        tintColor: color\n      }));\n    };\n\n    return _this;\n  }\n\n  _createClass(TabBarTop, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          navigation = _this$props3.navigation,\n          activeTintColor = _this$props3.activeTintColor,\n          inactiveTintColor = _this$props3.inactiveTintColor,\n          renderIcon = _this$props3.renderIcon,\n          getLabelText = _this$props3.getLabelText,\n          allowFontScaling = _this$props3.allowFontScaling,\n          showLabel = _this$props3.showLabel,\n          showIcon = _this$props3.showIcon,\n          upperCaseLabel = _this$props3.upperCaseLabel,\n          tabBarPosition = _this$props3.tabBarPosition,\n          screenProps = _this$props3.screenProps,\n          iconStyle = _this$props3.iconStyle,\n          rest = _objectWithoutProperties(_this$props3, [\"navigation\", \"activeTintColor\", \"inactiveTintColor\", \"renderIcon\", \"getLabelText\", \"allowFontScaling\", \"showLabel\", \"showIcon\", \"upperCaseLabel\", \"tabBarPosition\", \"screenProps\", \"iconStyle\"]);\n\n      return React.createElement(TabBar, _extends({}, rest, {\n        activeColor: activeTintColor,\n        inactiveColor: inactiveTintColor,\n        navigationState: navigation.state,\n        renderIcon: this._renderIcon,\n        renderLabel: this._renderLabel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        }\n      }));\n    }\n  }]);\n\n  return TabBarTop;\n}(React.PureComponent);\n\nTabBarTop.defaultProps = {\n  activeTintColor: 'rgba(255, 255, 255, 1)',\n  inactiveTintColor: 'rgba(255, 255, 255, 0.7)',\n  showIcon: false,\n  showLabel: true,\n  upperCaseLabel: true,\n  allowFontScaling: true\n};\nexport { TabBarTop as default };\nvar styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24\n  },\n  label: {\n    textAlign: 'center',\n    fontSize: 13,\n    margin: 4,\n    backgroundColor: 'transparent'\n  }\n});","map":{"version":3,"sources":["MaterialTopTabBar.tsx"],"names":["TabBarTop","React","PureComponent","defaultProps","activeTintColor","inactiveTintColor","showIcon","showLabel","upperCaseLabel","allowFontScaling","_renderLabel","route","focused","color","labelStyle","label","styles","tintColor","_renderIcon","renderIcon","iconStyle","navigation","getLabelText","tabBarPosition","screenProps","rest","StyleSheet","icon","height","width","textAlign","fontSize","margin","backgroundColor"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { TabBar } from 'react-native-tab-view';\nimport Animated from 'react-native-reanimated';\nimport { NavigationRoute } from 'react-navigation';\nimport { MaterialTabBarProps } from '../types';\n\ntype Scene = { route: NavigationRoute; focused: boolean; color: string };\n\nexport default class TabBarTop extends React.PureComponent<\n  MaterialTabBarProps\n> {\n  static defaultProps = {\n    activeTintColor: 'rgba(255, 255, 255, 1)',\n    inactiveTintColor: 'rgba(255, 255, 255, 0.7)',\n    showIcon: false,\n    showLabel: true,\n    upperCaseLabel: true,\n    allowFontScaling: true,\n  };\n\n  _renderLabel = ({ route, focused, color }: Scene) => {\n    const {\n      showLabel,\n      upperCaseLabel,\n      labelStyle,\n      allowFontScaling,\n    } = this.props;\n\n    if (showLabel === false) {\n      return null;\n    }\n\n    const label = this.props.getLabelText({ route });\n\n    if (typeof label === 'string') {\n      return (\n        <Animated.Text\n          style={[styles.label, { color }, labelStyle]}\n          allowFontScaling={allowFontScaling}\n        >\n          {upperCaseLabel ? label.toUpperCase() : label}\n        </Animated.Text>\n      );\n    }\n\n    if (typeof label === 'function') {\n      return label({ focused, tintColor: color });\n    }\n\n    return label;\n  };\n\n  _renderIcon = ({ route, focused, color }: Scene) => {\n    const { renderIcon, showIcon, iconStyle } = this.props;\n\n    if (showIcon === false) {\n      return null;\n    }\n\n    return (\n      <View style={[styles.icon, iconStyle]}>\n        {renderIcon({\n          route,\n          focused,\n          tintColor: color,\n        })}\n      </View>\n    );\n  };\n\n  render() {\n    const {\n      navigation,\n      activeTintColor,\n      inactiveTintColor,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      renderIcon,\n      getLabelText,\n      allowFontScaling,\n      showLabel,\n      showIcon,\n      upperCaseLabel,\n      tabBarPosition,\n      screenProps,\n      iconStyle,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      ...rest\n    } = this.props;\n\n    return (\n      <TabBar\n        {...rest}\n        activeColor={activeTintColor}\n        inactiveColor={inactiveTintColor}\n        navigationState={navigation.state}\n        renderIcon={this._renderIcon}\n        renderLabel={this._renderLabel}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24,\n  },\n  label: {\n    textAlign: 'center',\n    fontSize: 13,\n    margin: 4,\n    backgroundColor: 'transparent',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}